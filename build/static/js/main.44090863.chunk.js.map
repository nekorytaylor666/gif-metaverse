{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","gifList","setGifList","inputValue","setInputValue","useEffect","onLoad","a","checkIfWalletIsConnected","window","addEventListener","removeEventListener","getGifList","provider","getProvider","program","Program","account","fetch","publicKey","console","log","connection","Connection","Provider","solana","isPhantom","connect","onlyIfTrusted","response","toString","alert","error","connectWallet","createGifAccount","rpc","initialize","accounts","user","wallet","systemProgram","programId","signers","sendGif","length","addGif","onInputChange","event","value","target","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44090863.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\n\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\n\nconst { SystemProgram } = web3;\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\nconst programID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n// Constants\nconst TWITTER_HANDLE = \"akmt_dev\";\nconst TWITTER_LINK = `https://twitter.com/akmt_dev`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [gifList, setGifList] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.initialize({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}